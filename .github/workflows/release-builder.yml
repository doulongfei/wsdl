name: Create Release and Build Assets

on:
  push:
    tags:
      - 'v*'

# <-- KEY FIX: 在这里添加权限配置块
# 为整个工作流的所有任务授予写入内容的权限。
# 这是创建 Release 和上传 Release Assets 所必需的。
permissions:
  contents: write

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            这是由 GitHub Actions 自动发布的版本。
            可执行文件在下方的 Assets 中。
          draft: false
          prerelease: false

  build_and_upload:
    needs: create_release
    strategy:
      matrix:
        architecture: [ 'x86_64', 'aarch64' ]
    runs-on: ${{ matrix.architecture == 'aarch64' && 'ubuntu-latest' || 'ubuntu-latest' }}
    env:
      DOCKER_BUILDKIT: 1

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU for ARM build
      if: matrix.architecture == 'aarch64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm64
        # Enable binfmt for ARM emulation
        binfmt: true

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ "${{ matrix.architecture }}" = "aarch64" ]; then
          pip install --no-binary :all: lxml
        fi

    - name: Build executable with PyInstaller
      run: |
        if [ "${{ matrix.architecture }}" = "aarch64" ]; then
          # For ARM builds, use Docker with multiarch support
          docker run --rm --platform linux/arm64 \
            -v $(pwd):/workspace \
            -w /workspace \
            python:3.11-slim \
            sh -c "pip install pyinstaller && \
                   python -m PyInstaller \
                     --name soap-cli-${{ matrix.architecture }} \
                     --onefile \
                     --hidden-import=lxml._elementpath \
                     --hidden-import=pkg_resources.py2_warn \
                     cli_caller.py"
        else
          # Native x86_64 build
          python -m PyInstaller \
            --name soap-cli-${{ matrix.architecture }} \
            --onefile \
            --hidden-import=lxml._elementpath \
            --hidden-import=pkg_resources.py2_warn \
            cli_caller.py
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./dist/soap-cli-${{ matrix.architecture }}
        asset_name: soap-cli-${{ matrix.architecture }}
        asset_content_type: application/octet-stream

  # Additional job for ARM-specific deployment to Zhongke Fangde
  deploy_to_arm:
    needs: build_and_upload
    if: matrix.architecture == 'aarch64'
    runs-on: ubuntu-latest
    steps:
      - name: Download ARM artifact
        uses: actions/download-artifact@v3
        with:
          name: soap-cli-aarch64
          path: ./dist

      - name: Deploy to Zhongke Fangde ARM
        run: |
          # Add your deployment commands here for ARM machines
          # Example using scp:
          # scp ./dist/soap-cli-aarch64 user@zhongke-fangde-arm:/path/to/deploy/
          echo "ARM build ready for deployment to Zhongke Fangde machines"
