name: Build Cross-Platform CLI

# 触发条件：
# 当代码被推送到 main 或 master 分支时，都会触发
# 并且允许在 Actions 页面手动触发
on:
  push:
    branches: [ "main", "master" ] # <--- 修改点 1: 同时支持 main 和 master 分支
  workflow_dispatch:

jobs:
  build-and-release:
    strategy:
      matrix:
        architecture: [ 'x86_64', 'aarch64' ]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # QEMU 是一个模拟器，它允许我们在 x86 的 runner 上完成 ARM 架构的构建
    - name: Set up QEMU for ARM build
      if: matrix.architecture == 'aarch64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm64

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # 这里的打包命令也进行了优化，确保能够正确地跨平台构建
    - name: Build executable with PyInstaller
      run: |
        # <--- 修改点 2: 优化了构建命令，更加健壮
        # 我们不再需要 if/else 判断，PyInstaller 的 --target-arch 在新版中可以直接工作
        # 为简单起见，我们统一使用 cross-platform build 命令
         python -m PyInstaller --target-arch ${{ matrix.architecture }} \
           --name soap-cli \
           --onefile \
           --hidden-import=lxml._elementpath \
           --hidden-import=pkg_resources.py2_warn \
           cli_caller.py

    - name: Prepare artifact for upload
      run: |
        mv dist/soap-cli dist/soap-cli-${{ matrix.architecture }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: soap-cli-${{ matrix.architecture }}
        path: dist/soap-cli-${{ matrix.architecture }}

